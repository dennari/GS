<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Created" xml:space="preserve">
    <value>@Created</value>
  </data>
  <data name="DeleteStorage" xml:space="preserve">
    <value>DROP TABLE IF EXISTS Actions; DROP TABLE IF EXISTS Plants;</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>@Email</value>
  </data>
  <data name="GardenId" xml:space="preserve">
    <value>@GardenId</value>
  </data>
  <data name="GetActions" xml:space="preserve">
    <value>SELECT * FROM Actions WHERE 
(
(@PlantActionId IS NOT NULL AND PlantActionId = @PlantActionId)
OR
(@PlantId IS NOT NULL AND PlantId = @PlantId)
OR
(@UserId IS NOT NULL AND UserId = @UserId)
)
ORDER BY Created;</value>
  </data>
  <data name="GetPlants" xml:space="preserve">
    <value>SELECT * FROM Plants WHERE 
(
(@PlantId IS NOT NULL AND PlantId = @PlantId)
OR
(@UserId IS NOT NULL AND UserId = @UserId)
OR
(@GardenId IS NOT NULL AND GardenId = @GardenId)
)
ORDER BY Created;
</value>
  </data>
  <data name="InitializeStorage" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS Actions
(
       PlantActionId guid NOT NULL,
       Created INT NOT NULL,  
       UserId guid NOT NULL,
       PlantId guid NOT NULL,
       Type int NOT NULL,
       Payload blob NOT NULL,
       CONSTRAINT PK_Actions PRIMARY KEY (PlantActionId)
);
CREATE INDEX IF NOT EXISTS IX_Actions_UserId ON Actions (UserId);
CREATE INDEX IF NOT EXISTS IX_Actions_PlantId ON Actions (PlantId);
CREATE INDEX IF NOT EXISTS IX_Actions_Created ON Actions (Created);

CREATE TABLE IF NOT EXISTS Plants
(
       UserId guid NOT NULL,
       Created INT NOT NULL,
       GardenId guid NOT NULL,
       PlantId guid NOT NULL,
       WateringScheduleId guid NULL,
       FertilizingScheduleId guid NULL,
       Payload blob NOT NULL,
       CONSTRAINT PK_Plants PRIMARY KEY (PlantId)
);
CREATE INDEX IF NOT EXISTS IX_Plants_UserId ON Plants (UserId);
CREATE INDEX IF NOT EXISTS IX_Plants_GardenId ON Plants (GardenId);
CREATE INDEX IF NOT EXISTS IX_Plants_WateringScheduleId ON Plants (WateringScheduleId);
CREATE INDEX IF NOT EXISTS IX_Plants_FertilizingScheduleId ON Plants (FertilizingScheduleId);
CREATE INDEX IF NOT EXISTS IX_Plants_Created ON Plants (Created);

CREATE TABLE IF NOT EXISTS Users
(
       UserId guid NOT NULL,
       Created INT NOT NULL,
       GardenId guid NOT NULL,
       Username text NOT NULL,
       Email text NULL,
       Payload blob NOT NULL,
       CONSTRAINT PK_Users PRIMARY KEY (UserId)
);


CREATE INDEX IF NOT EXISTS IX_Users_Username ON Users (Username);
CREATE INDEX IF NOT EXISTS IX_Users_Created ON Users (Created);

CREATE TABLE IF NOT EXISTS Collaborators
(
       UserId guid NOT NULL,
       Status INT NOT NULL,
       CONSTRAINT PK_Collaborators PRIMARY KEY (UserId)
);

CREATE TABLE IF NOT EXISTS Schedules
(
       ScheduleId guid NOT NULL,
       Payload blob NOT NULL,
       CONSTRAINT PK_Schedules PRIMARY KEY (ScheduleId)
);</value>
  </data>
  <data name="Payload" xml:space="preserve">
    <value>@Payload</value>
  </data>
  <data name="PersistAction" xml:space="preserve">
    <value>INSERT OR REPLACE INTO Actions 
(PlantActionId, Created, UserId, PlantId, Type, Payload) 
VALUES(
@PlantActionId,@Created,@UserId,@PlantId,@Type,@Payload
);</value>
  </data>
  <data name="PersistPlant" xml:space="preserve">
    <value>INSERT OR REPLACE INTO Plants
(UserId, Created,GardenId,PlantId,WateringScheduleId,FertilizingScheduleId,Payload) 
VALUES(
@UserId,@Created,@GardenId,@PlantId,@WateringScheduleId,@FertilizingScheduleId,@Payload
);</value>
  </data>
  <data name="PersistUser" xml:space="preserve">
    <value>INSERT OR REPLACE INTO Users
(UserId, Created,GardenId,Username,Email,Payload) 
VALUES(
@UserId,@Created,@GardenId,@Username,@Email,@Payload
);</value>
  </data>
  <data name="PlantActionId" xml:space="preserve">
    <value>@PlantActionId</value>
  </data>
  <data name="PlantId" xml:space="preserve">
    <value>@PlantId</value>
  </data>
  <data name="PurgeStorage" xml:space="preserve">
    <value>DELETE FROM Actions; DELETE FROM Plants; DELETE FROM Users; DELETE FROM Collaborators;</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>@Status</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>@Type</value>
  </data>
  <data name="UserId" xml:space="preserve">
    <value>@UserId</value>
  </data>
  <data name="Username" xml:space="preserve">
    <value>@Username</value>
  </data>
  <data name="UserRevision" xml:space="preserve">
    <value>@UserRevision</value>
  </data>
  <data name="FertilizingScheduleId" xml:space="preserve">
    <value>@FertilizingScheduleId</value>
  </data>
  <data name="PersistSchedule" xml:space="preserve">
    <value>INSERT OR REPLACE INTO Schedules
(ScheduleId, Payload) 
VALUES(
@ScheduleId,@Payload
);</value>
  </data>
  <data name="ScheduleId" xml:space="preserve">
    <value>@ScheduleId</value>
  </data>
  <data name="WateringScheduleId" xml:space="preserve">
    <value>@WateringScheduleId</value>
  </data>
</root>